{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/www/utils.ts"],"names":[],"mappings":";;;AAAA,qCAA6B;AAE7B,SAAgB,SAAS,CAAC,KAAa,EAAE,SAAiB,EAAE,OAAa,EAAE;IACvE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,cAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACP,CAAC;AAJD,8BAIC;AAeD,SAAS,gBAAgB;IACrB,IAAI,MAAM,CAAC,eAAe,IAAI,IAAI,EAAE;QAChC,OAAO;KACV;IAED,IAAI,MAAM,CAAC,gBAAgB,KAAK,SAAS;QAAE,MAAM,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAExE,MAAM,CAAC,eAAe,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE;QACzC,IAAI,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;YACnD,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,OAAgB,EAAE,EAAE;gBAC5D,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;SACN;IACL,CAAC,CAAC;IAEF,MAAM,CAAC,gBAAgB,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE;QAC7C,IAAI,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;YACnD,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACpD;aAAM;YACH,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAClD;IACL,CAAC,CAAC;IAEF,MAAM,CAAC,kBAAkB,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE;QAC/C,IAAI,MAAM,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;YACnD,IAAI,OAAO,EAAE;gBACT,MAAM,GAAG,GAAG,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAChE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;oBACV,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACrD;aACJ;iBAAM;gBACH,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;aAC3C;SACJ;IACL,CAAC,CAAC;AACN,CAAC;AACD,gBAAgB,EAAE,CAAC","sourcesContent":["import {exec} from 'cordova';\n\nexport function asyncExec(clazz: string, reference: string, args:any[] = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n        exec(resolve, reject, clazz, reference, args);\n    });\n}\n\ntype Handler = (data: any) => void;\n\ndeclare global {\n    interface Window {\n        hmsEventHandlers: {\n            [key: string]: Handler[];\n        };\n        hmsEventHandler: (eventName: string, data: any) => void;\n        registerHMSEvent: (eventName: string, handler: Handler) => void;\n        unregisterHMSEvent: (eventName: string, handler?: Handler) => void;\n    }\n}\n\nfunction initEventHandler() {\n    if (window.hmsEventHandler != null) {\n        return;\n    }\n\n    if (window.hmsEventHandlers === undefined) window.hmsEventHandlers = {};\n\n    window.hmsEventHandler = (eventName, data) => {\n        if (window.hmsEventHandlers.hasOwnProperty(eventName)) {\n            window.hmsEventHandlers[eventName].forEach((handler: Handler) => {\n                handler(data);\n            });\n        }\n    };\n\n    window.registerHMSEvent = (eventName, handler) => {\n        if (window.hmsEventHandlers.hasOwnProperty(eventName)) {\n            window.hmsEventHandlers[eventName].push(handler);\n        } else {\n            window.hmsEventHandlers[eventName] = [handler];\n        }\n    };\n\n    window.unregisterHMSEvent = (eventName, handler) => {\n        if (window.hmsEventHandlers.hasOwnProperty(eventName)) {\n            if (handler) {\n                const idx = window.hmsEventHandlers[eventName].indexOf(handler);\n                if (idx > -1) {\n                    window.hmsEventHandlers[eventName].splice(idx, 1);\n                }\n            } else {\n                window.hmsEventHandlers[eventName] = [];\n            }\n        }\n    };\n}\ninitEventHandler();"]}