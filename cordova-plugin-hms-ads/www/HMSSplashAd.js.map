{"version":3,"file":"HMSSplashAd.js","sourceRoot":"","sources":["../src/www/HMSSplashAd.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,+BAA2B;AAE3B,MAAa,WAAY,SAAQ,SAAG;IAChC;QACI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;IACzC,CAAC;IAEK,MAAM;;;;;YACR,OAA6B,OAAM,MAAM,WAAE,CAAC;QAChD,CAAC;KAAA;IAED,EAAE,CAAC,SAAyB,EAAE,QAAoB;QAC9C,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,CAAC,IAAY;QAChB,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAA;IAC9C,CAAC;IAED,kBAAkB,CAAC,eAAuB;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAC,iBAAiB,EAAE,eAAe,EAAC,CAAC,CAAA;IAC/E,CAAC;IAED,cAAc,CAAC,WAAmB;QAC9B,OAAO,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAC,aAAa,EAAE,WAAW,EAAC,CAAC,CAAA;IACnE,CAAC;IAED,IAAI,CAAC,OAA4B;QAC7B,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAC,OAAO,CAAC,CAAA;IACnC,CAAC;IAED,SAAS,CAAC,OAA4B;QAClC,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,EAAC,OAAO,CAAC,CAAA;IACxC,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;IAClC,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;IAChC,CAAC;IACD,UAAU;QACN,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IACjC,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;IAChC,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;IAC/B,CAAC;IAED,oBAAoB;QAChB,OAAO,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAA;IAC3C,CAAC;IAED,iBAAiB,CAAC,cAA8B;QAC5C,OAAO,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAC,gBAAgB,EAAE,cAAc,EAAC,CAAC,CAAA;IAC5E,CAAC;CAGJ;AA7DD,kCA6DC","sourcesContent":["import { HMSScreenOrientation, SplashAdEvents, AudioFocusType } from './HMSConstants'\r\nimport { AdParam, SplashAdLoadOptions } from './interfaces'\r\nimport { Ads } from './ads'\r\n\r\nexport class HMSSplashAd extends Ads{\r\n    constructor() {\r\n        super(HMSSplashAd.name.toLowerCase())\r\n    }\r\n\r\n    async create(): Promise<HMSSplashAd> {\r\n        return <Promise<HMSSplashAd>>super.create();\r\n    }\r\n\r\n    on(eventName: SplashAdEvents, callback: () => void): void {\r\n        super.on(eventName, callback);\r\n    }\r\n\r\n    setLogo(file: string): Promise<void> {\r\n        return this.run('setLogo', {'file': file})\r\n    }\r\n\r\n    setWideSloganResId(wideSloganResId: string): Promise<void> {\r\n        return this.run('setWideSloganResId', {'wideSloganResId': wideSloganResId})\r\n    }\r\n\r\n    setSloganResId(sloganResId: string): Promise<void> {\r\n        return this.run('setSloganResId', {'sloganResId': sloganResId})\r\n    }\r\n\r\n    load(options: SplashAdLoadOptions): Promise<void>{\r\n        return this.run('load',options)\r\n    }\r\n\r\n    preloadAd(options: SplashAdLoadOptions): Promise<void>{\r\n        return this.run('preloadAd',options)\r\n    }\r\n\r\n    destroyView(): Promise<void>{\r\n        return this.run('destroyView')\r\n    }\r\n\r\n    pauseView(): Promise<void>{\r\n        return this.run('pauseView')\r\n    }\r\n    resumeView(): Promise<void>{\r\n        return this.run('resumeView')\r\n    }\r\n\r\n    isLoading(): Promise<boolean>{\r\n        return this.run('isLoading')\r\n    }\r\n\r\n    isLoaded(): Promise<boolean>{\r\n        return this.run('isLoaded')\r\n    }\r\n    \r\n    setAdDisplayListener(): Promise<void>{\r\n        return this.run('setAdDisplayListener')\r\n    }\r\n\r\n    setAudioFocusType(audioFocusType: AudioFocusType): Promise<void>{\r\n        return this.run('setAudioFocusType', {\"audioFocusType\": audioFocusType})\r\n    }\r\n\r\n\r\n}"]}