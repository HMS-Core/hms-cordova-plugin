/*
    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var ContactShieldSetting;
(function (ContactShieldSetting) {
    ContactShieldSetting[ContactShieldSetting["DEFAULT_INCUBATION_PERIOD"] = 14] = "DEFAULT_INCUBATION_PERIOD";
})(ContactShieldSetting || (ContactShieldSetting = {}));
export var ContactShieldEngine;
(function (ContactShieldEngine) {
    ContactShieldEngine["TOKEN_A"] = "TOKEN_WINDOW_MODE";
})(ContactShieldEngine || (ContactShieldEngine = {}));
export var HMSPermission;
(function (HMSPermission) {
    HMSPermission["ACCESS_NETWORK_STATE"] = "android.permission.ACCESS_NETWORK_STATE";
    HMSPermission["BLUETOOTH"] = "android.permission.BLUETOOTH";
    HMSPermission["BLUETOOTH_ADMIN"] = "android.permission.BLUETOOTH_ADMIN";
    HMSPermission["ACCESS_COARSE_LOCATION"] = "android.permission.ACCESS_COARSE_LOCATION";
    HMSPermission["ACCESS_FINE_LOCATION"] = "android.permission.ACCESS_FINE_LOCATION";
})(HMSPermission || (HMSPermission = {}));
export var RiskLevel;
(function (RiskLevel) {
    RiskLevel[RiskLevel["RISK_LEVEL_INVALID"] = 0] = "RISK_LEVEL_INVALID";
    RiskLevel[RiskLevel["RISK_LEVEL_LOWEST"] = 1] = "RISK_LEVEL_LOWEST";
    RiskLevel[RiskLevel["RISK_LEVEL_LOW"] = 2] = "RISK_LEVEL_LOW";
    RiskLevel[RiskLevel["RISK_LEVEL_MEDIUM_LOW"] = 3] = "RISK_LEVEL_MEDIUM_LOW";
    RiskLevel[RiskLevel["RISK_LEVEL_MEDIUM"] = 4] = "RISK_LEVEL_MEDIUM";
    RiskLevel[RiskLevel["RISK_LEVEL_MEDIUM_HIGH"] = 5] = "RISK_LEVEL_MEDIUM_HIGH";
    RiskLevel[RiskLevel["RISK_LEVEL_HIGH"] = 6] = "RISK_LEVEL_HIGH";
    RiskLevel[RiskLevel["RISK_LEVEL_EXT_HIGH"] = 7] = "RISK_LEVEL_EXT_HIGH";
    RiskLevel[RiskLevel["RISK_LEVEL_HIGHEST"] = 8] = "RISK_LEVEL_HIGHEST";
})(RiskLevel || (RiskLevel = {}));
export var HMSStatusCode;
(function (HMSStatusCode) {
    HMSStatusCode[HMSStatusCode["STATUS_SUCCESS"] = 0] = "STATUS_SUCCESS";
    HMSStatusCode[HMSStatusCode["STATUS_FAILURE"] = -1] = "STATUS_FAILURE";
    HMSStatusCode[HMSStatusCode["STATUS_API_DISORDER"] = 8001] = "STATUS_API_DISORDER";
    HMSStatusCode[HMSStatusCode["STATUS_APP_QUOTA_LIMITED"] = 8100] = "STATUS_APP_QUOTA_LIMITED";
    HMSStatusCode[HMSStatusCode["STATUS_DISK_FULL"] = 8101] = "STATUS_DISK_FULL";
    HMSStatusCode[HMSStatusCode["STATUS_BLUETOOTH_OPERATION_ERROR"] = 8102] = "STATUS_BLUETOOTH_OPERATION_ERROR";
    HMSStatusCode[HMSStatusCode["STATUS_MISSING_PERMISSION_BLUETOOTH"] = 8016] = "STATUS_MISSING_PERMISSION_BLUETOOTH";
    HMSStatusCode[HMSStatusCode["STATUS_MISSING_SETTING_LOCATION_ON"] = 8020] = "STATUS_MISSING_SETTING_LOCATION_ON";
    HMSStatusCode[HMSStatusCode["STATUS_INTERNAL_ERROR"] = 8060] = "STATUS_INTERNAL_ERROR";
    HMSStatusCode[HMSStatusCode["STATUS_MISSING_PERMISSION_INTERNET"] = 8064] = "STATUS_MISSING_PERMISSION_INTERNET";
})(HMSStatusCode || (HMSStatusCode = {}));
var HmsContactShield = /** @class */ (function (_super) {
    __extends(HmsContactShield, _super);
    function HmsContactShield() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HmsContactShield.prototype.clearData = function () { return cordova(this, "clearData", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getContactDetail = function (token) { return cordova(this, "getContactDetail", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.startContactShield = function (incubationPeriod) { return cordova(this, "startContactShield", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.startContactShieldOld = function (incubationPeriod) { return cordova(this, "startContactShieldOld", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.startContactShieldNoPersistent = function (incubationPeriod) { return cordova(this, "startContactShieldNoPersistent", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.stopContactShield = function () { return cordova(this, "stopContactShield", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getContactSketch = function (token) { return cordova(this, "getContactSketch", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getContactWindow = function (token) { return cordova(this, "getContactWindow", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getPeriodicKey = function () { return cordova(this, "getPeriodicKey", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.isContactShieldRunning = function () { return cordova(this, "isContactShieldRunning", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.putSharedKeyFiles = function (sharedKeyData) { return cordova(this, "putSharedKeyFiles", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.putSharedKeyFilesOld = function (sharedKeyData) { return cordova(this, "putSharedKeyFilesOld", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.putSharedKeyFilesKeys = function (sharedKeyData) { return cordova(this, "putSharedKeyFilesKeys", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.putSharedKeyFilesProvider = function (files) { return cordova(this, "putSharedKeyFilesProvider", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getDailySketch = function (dailySketch) { return cordova(this, "getDailySketch", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.setSharedKeysDataMapping = function (sharedKey) { return cordova(this, "setSharedKeysDataMapping", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getSharedKeysDataMapping = function () { return cordova(this, "getSharedKeysDataMapping", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getStatus = function () { return cordova(this, "getStatus", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getContactShieldVersion = function () { return cordova(this, "getContactShieldVersion", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.getDeviceCalibrationConfidence = function () { return cordova(this, "getDeviceCalibrationConfidence", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.isSupportScanningWithoutLocation = function () { return cordova(this, "isSupportScanningWithoutLocation", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.disableLogger = function () { return cordova(this, "disableLogger", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.enableLogger = function () { return cordova(this, "enableLogger", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.handleCallback = function (event, callback) { return cordova(this, "handleCallback", { "sync": true }, arguments); };
    HmsContactShield.prototype.registerReceiver = function () { return cordova(this, "registerReceiver", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.unregisterReceiver = function () { return cordova(this, "unregisterReceiver", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.hasPermission = function (permission) { return cordova(this, "hasPermission", { "otherPromise": true }, arguments); };
    HmsContactShield.prototype.requestPermissions = function (permissions) { return cordova(this, "requestPermissions", { "otherPromise": true }, arguments); };
    HmsContactShield.pluginName = "HmsContactShield";
    HmsContactShield.plugin = "cordova-plugin-hms-contactshield";
    HmsContactShield.pluginRef = "HMSContactShield";
    HmsContactShield.repo = "https://github.com/HMS-Core/hms-cordova-plugin";
    HmsContactShield.platforms = ["Android"];
    HmsContactShield = __decorate([
        Injectable()
    ], HmsContactShield);
    return HmsContactShield;
}(IonicNativePlugin));
export { HmsContactShield };
//# sourceMappingURL=data:application/json;base64,