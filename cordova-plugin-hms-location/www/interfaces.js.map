{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/www/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["/*\r\n    Copyright 2020-2023. Huawei Technologies Co., Ltd. All rights reserved.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\")\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n        https://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\nimport {\r\n    ActivityType,\r\n    ConversionType,\r\n    CoordinateType,\r\n    GeofenceInitConversionType,\r\n    GeofenceTriggerType,\r\n    NavigationRequestConstants,\r\n    NotificationCategory,\r\n    NotificationImportance,\r\n    PriorityConstants,\r\n    RequestType\r\n} from \"./enums\";\r\n\r\nexport interface Location {\r\n    latitude: number,\r\n    longitude: number,\r\n    altitude: number,\r\n    speed: number,\r\n    bearing: number,\r\n    accuracy: number,\r\n    time: number,\r\n    fromMockProvider: boolean,\r\n    verticalAccuracyMeters: number,\r\n    bearingAccuracyDegrees: number,\r\n    speedAccuracyMetersPerSecond: number\r\n}\r\n\r\nexport interface HWLocation {\r\n    latitude: number,\r\n    longitude: number,\r\n    altitude: number,\r\n    speed: number,\r\n    bearing: number,\r\n    accuracy: number,\r\n    provider: string,\r\n    time: number,\r\n    elapsedRealtimeNanos: number,\r\n    countryName: string,\r\n    state: string,\r\n    city: string,\r\n    county: string,\r\n    street: string,\r\n    featureName: string,\r\n    postalCode: string,\r\n    phone: string,\r\n    url: string,\r\n    extraInfo: string,\r\n    verticalAccuracyMeters: number,\r\n    bearingAccuracyDegrees: number,\r\n    speedAccuracyMetersPerSecond: number,\r\n    coordinateType: number,\r\n}\r\n\r\nexport interface LocationSettingsStates {\r\n    isBlePresent: boolean\r\n    isBleUsable: boolean,\r\n    isGnssPresent: boolean,\r\n    isGnssUsable: boolean,\r\n    isLocationPresent: boolean,\r\n    isLocationUsable: boolean,\r\n    isNetworkLocationPresent: boolean,\r\n    isNetworkLocationUsable: boolean,\r\n}\r\n\r\nexport interface LocationRequest {\r\n    priority: PriorityConstants,\r\n    interval?: number,\r\n    numUpdates?: number,\r\n    fastestInterval?: number,\r\n    expirationTime?: number,\r\n    expirationTimeDuration?: number,\r\n    smallestDisplacement?: number,\r\n    maxWaitTime?: number,\r\n    needAddress?: boolean,\r\n    language?: string,\r\n    countryCode?: string,\r\n    coordinateType?: number,\r\n}\r\n\r\nexport interface LocationSettingsRequest {\r\n    locationRequests: LocationRequest[],\r\n    needBle: boolean,\r\n    alwaysShow: boolean,\r\n}\r\n\r\nexport interface LatLng {\r\n    longitude: number,\r\n    latitude: number\r\n}\r\n\r\nexport interface NavigationResult {\r\n    state: number,\r\n    possibility: number\r\n}\r\n\r\nexport interface ActivityConversionInfo {\r\n    conversionType: ConversionType,\r\n    activityType: ActivityType\r\n}\r\n\r\nexport interface Geofence {\r\n    longitude: number,\r\n    latitude: number,\r\n    radius: number,\r\n    uniqueId: string,\r\n    conversions: GeofenceTriggerType,\r\n    validContinueTime: number,\r\n    dwellDelayTime: number,\r\n    notificationInterval: number,\r\n}\r\n\r\nexport interface Notification {\r\n    contentTitle?: string,\r\n    category: NotificationCategory,\r\n    priority: NotificationImportance,\r\n    channelName: string,\r\n    color?: number,\r\n    colorized?: boolean,\r\n    contentInfo?: string,\r\n    contentText?: string,\r\n    largeIcon?: string,\r\n    onGoing?: boolean,\r\n    smallIcon: string,\r\n    subText?: string,\r\n    sound?: string,\r\n    vibrate?: number[],\r\n    visibility?: number\r\n}\r\n\r\nexport interface LocationResult {\r\n    lastLocation: Location,\r\n    hwLocations: HWLocation[],\r\n    lastHWLocation: HWLocation,\r\n    locations: Location[]\r\n}\r\n\r\nexport interface ActivityConversionData {\r\n    activityType: ActivityType,\r\n    conversionType: ConversionType,\r\n    elapsedTimeFromReboot: number\r\n}\r\n\r\nexport interface ActivityConversionResponse {\r\n    activityConversionDataList: ActivityConversionData[]\r\n}\r\n\r\nexport interface ActivityIdentificationData {\r\n    identificationActivity: ActivityType,\r\n    possibility: number\r\n}\r\n\r\nexport interface ActivityIdentificationResponse {\r\n    elapsedTimeFromReboot: number,\r\n    mostActivityIdentification: ActivityConversionInfo,\r\n    time: number,\r\n    activityIdentificationDatas: ActivityIdentificationData[]\r\n}\r\n\r\nexport interface FusedLocationService {\r\n    disableBackgroundLocation(): Promise<void>\r\n    enableBackgroundLocation(notificationId: number, notification: string): Promise<void>\r\n    checkLocationSettings(request: LocationSettingsRequest): Promise<LocationSettingsStates>;\r\n    flushLocations(): Promise<void>\r\n    getLastLocation(): Promise<Location>;\r\n    getLastLocationWithAddress(request: LocationRequest): Promise<HWLocation>;\r\n    getLocationAvailability(): Promise<boolean>;\r\n    getNavigationContextState(requestType: NavigationRequestConstants): Promise<NavigationResult>;\r\n    removeLocationUpdates(requestCode: number, type: RequestType): Promise<boolean>;\r\n    requestLocationUpdates(requestCode: number, request: LocationRequest, callback?: (locationResult: LocationResult) => void): Promise<boolean>;\r\n    requestLocationUpdatesEx(requestCode: number, request: LocationRequest): Promise<boolean>;\r\n    setMockLocation(latLng: LatLng): Promise<void>;\r\n    setMockMode(mode: boolean): Promise<void>;\r\n    setLogConfig(logConfigSettings: LogConfigSettings): Promise<void>;\r\n    getLogConfig(): Promise<LogConfigSettings>;\r\n}\r\n\r\nexport interface GeofenceService {\r\n    createGeofenceList(requestCode: number, geofences: Geofence[], initConversions: GeofenceInitConversionType, coordinateType: CoordinateType, callback?: (data: Location) => void): Promise<boolean>;\r\n    deleteGeofenceList(requestCode: number): Promise<boolean>;\r\n}\r\n\r\nexport interface ActivityIdentificationService {\r\n    createActivityConversionUpdates(requestCode: number, activityConversionRequest: ActivityConversionInfo[], callback?: (data: ActivityConversionResponse) => void): Promise<boolean>;\r\n    createActivityIdentificationUpdates(requestCode: number, intervalMillis: number, callback?: (data: ActivityIdentificationResponse) => void): Promise<boolean>;\r\n    deleteActivityConversionUpdates(requestCode: number): Promise<boolean>;\r\n    deleteActivityIdentificationUpdates(requestCode: number): Promise<boolean>;\r\n}\r\n\r\nexport interface GeocoderService {\r\n    getFromLocation(getFromLocationRequest: GetFromLocationRequest): Promise<HWLocation[]>;\r\n    getFromLocationName(getFromLocationNameRequest: GetFromLocationNameRequest): Promise<HWLocation[]>;\r\n}\r\n\r\nexport interface CoordinateConversionService {\r\n    convertCoord(latitude: number, longitude: number, coordType:number): Promise<LonLat>;\r\n}\r\n\r\nexport interface GetFromLocationRequest {\r\n    latitude: number;\r\n    longitude: number;\r\n    maxResults: number;\r\n}\r\nexport interface GetFromLocationNameRequest {\r\n    locationName: string;\r\n    maxResults: number;\r\n    corner?: Corner;\r\n}\r\nexport interface Corner {\r\n    lowerLeftLatitude: number;\r\n    lowerLeftLongitude: number;\r\n    upperRightLatitude: number;\r\n    upperRightLongitude: number;\r\n}\r\nexport interface LogConfigSettings {\r\n    logConfigSettingsFile? : LogConfigSettingsFile;\r\n    logPath: string;\r\n}\r\nexport interface LogConfigSettingsFile {\r\n    fileExpiredTime: number;\r\n    fileNum: number;\r\n    fileSize: number;\r\n}\r\n\r\nexport interface LonLat {\r\n    longitude: number,\r\n    latitude: number\r\n}\r\n"]}