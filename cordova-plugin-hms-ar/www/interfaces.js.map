{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/www/interfaces.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;EAcE;;;AAgIF,IAAY,eAaX;AAbD,WAAY,eAAe;IACvB,sEAAiB,CAAA;IACjB,+EAAqB,CAAA;IACrB,qFAAwB,CAAA;IACxB,6FAA4B,CAAA;IAC5B,2GAAmC,CAAA;IACnC,uFAAyB,CAAA;IACzB,+FAA6B,CAAA;IAC7B,6GAAoC,CAAA;IACpC,iFAAsB,CAAA;IACtB,qGAAgC,CAAA;IAChC,yGAAkC,CAAA;IAClC,sFAAyB,CAAA;AAC7B,CAAC,EAbW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAa1B;AAED,IAAY,MAGX;AAHD,WAAY,MAAM;IACd,uCAA6B,CAAA;IAC7B,yEAA+D,CAAA;AACnE,CAAC,EAHW,MAAM,GAAN,cAAM,KAAN,cAAM,QAGjB;AAED,IAAY,aAKX;AALD,WAAY,aAAa;IACrB,oEAAkB,CAAA;IAClB,yDAAY,CAAA;IACZ,qDAAU,CAAA;IACV,uDAAW,CAAA;AACf,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB;AAED,IAAY,UAIX;AAJD,WAAY,UAAU;IAClB,kEAAoB,CAAA;IACpB,6DAAiB,CAAA;IACjB,2DAAgB,CAAA;AACpB,CAAC,EAJW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAIrB;AAED,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC1B,yEAAe,CAAA;IACf,uEAAc,CAAA;IACd,yEAAe,CAAA;IACf,uEAAc,CAAA;IACd,yEAAe,CAAA;IACf,6EAAiB,CAAA;AACrB,CAAC,EAPW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAO7B;AAED,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,iFAA4B,CAAA;IAC5B,qFAA8B,CAAA;IAC9B,+DAAmB,CAAA;IACnB,6DAAkB,CAAA;AACtB,CAAC,EALW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAKpB;AAED,IAAY,sBAMX;AAND,WAAY,sBAAsB;IAC9B,wHAAmC,CAAA;IACnC,yHAAmC,CAAA;IACnC,uHAAkC,CAAA;IAClC,yHAAmC,CAAA;IACnC,2HAAoC,CAAA;AACxC,CAAC,EANW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAMjC","sourcesContent":["/*\r\n    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\")\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n        https://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\nexport interface ColorRGBA {\r\n    red: number;\r\n    green: number;\r\n    blue: number;\r\n    alpha: number;\r\n}\r\n\r\nexport interface SceneBounds {\r\n    marginTop?: number,\r\n    marginBottom?: number\r\n}\r\n\r\nexport interface ARSceneConfig {\r\n\r\n}\r\n\r\nexport interface ARHandConfig extends ARSceneConfig {\r\n    drawBox: boolean;\r\n    boxColor: ColorRGBA;\r\n    lineWidth: number;\r\n}\r\n\r\nexport interface ARWorldConfig extends ARSceneConfig {\r\n    objPath: string;\r\n    texturePath: string;\r\n    labelDraw: boolean;\r\n    imageOther: string;\r\n    imageWall: string;\r\n    imageFloor: string;\r\n    imageSeat: string;\r\n    imageTable: string;\r\n    imageCeiling: string;\r\n    textOther: string;\r\n    textWall: string;\r\n    textFloor: string;\r\n    textSeat: string;\r\n    textTable: string;\r\n    textCeiling: string;\r\n    colorOther: ColorRGBA;\r\n    colorWall: ColorRGBA;\r\n    colorFloor: ColorRGBA;\r\n    colorSeat: ColorRGBA;\r\n    colorTable: ColorRGBA;\r\n    colorCeiling: ColorRGBA;\r\n}\r\n\r\nexport interface ARFaceConfig extends ARSceneConfig {\r\n    pointSize: number;\r\n    depthColor: ColorRGBA;\r\n    texturePath: string;\r\n}\r\n\r\nexport interface ARBodyConfig extends ARSceneConfig {\r\n    drawLine: boolean;\r\n    drawPoint: boolean;\r\n    lineWidth: number;\r\n    pointSize: number;\r\n    lineColor: ColorRGBA;\r\n    pointColor: ColorRGBA;\r\n}\r\n\r\nexport interface Anchor {\r\n    pose: ARPose;\r\n    trackingState: TrackingState;\r\n}\r\n\r\nexport interface ARFaceBlendShapes {\r\n    blendShapeCount: number;\r\n    blendShapeData: number[];\r\n    blendShapeType: string[];\r\n    blendShapeDataMap: any;\r\n}\r\n\r\nexport interface ARPose {\r\n    translation: number[];\r\n    rotation: number[];\r\n}\r\n\r\nexport interface ARHand {\r\n    gestureType: number;\r\n    handType: ARHandType;\r\n    anchors: Anchor[];\r\n    gestureHandBox: number[];\r\n    gestureCenter: number[];\r\n    handSkeletonArray: number[];\r\n    handSkeletonConnection: number[];\r\n    handSkeletonTypes: number[];\r\n    gestureCoordinateSystem: ARCoordinateSystemType;\r\n    skeletonCoordinateSystem: ARCoordinateSystemType;\r\n    trackingState: TrackingState;\r\n}\r\n\r\nexport interface ARPlane {\r\n    centerPose: ARPose;\r\n    extentX: number;\r\n    extentZ: number;\r\n    planePolygon: number[];\r\n    label: SemanticPlaneLabel;\r\n    type: PlaneType;\r\n    trackingState: TrackingState;\r\n    anchors: Anchor[];\r\n}\r\n\r\nexport interface ARFace {\r\n    anchors: Anchor[];\r\n    faceBlendShapes: ARFaceBlendShapes;\r\n    pose: ARPose[];\r\n    trackingState: TrackingState;\r\n    healthParameterCount: number,\r\n    healthParameters: Map<HealthParameter, number>\r\n}\r\n\r\nexport interface ARBody {\r\n    bodyAction: number;\r\n    anchors: Anchor[];\r\n    bodySkeletonTypes: number[];\r\n    skeletonPoint2D: number[];\r\n    skeletonPoint3D: number[];\r\n    skeletonConfidince: number[];\r\n    bodySkeletonConnection: number[];\r\n    skeletonPointIsExist2D: number[];\r\n    skeletonPointIsExist3D: number[];\r\n    coordinateSystemType: ARCoordinateSystemType;\r\n    trackingState: TrackingState;\r\n}\r\n\r\nexport enum HealthParameter {\r\n    UNKNOWN_TYPE = -1,\r\n    PARAMETER_INVALID = 0,\r\n    PARAMETER_HEART_RATE = 1,\r\n    PARAMETER_HEART_RATE_SNR = 2,\r\n    PARAMETER_HEART_RATE_CONFIDENCE = 3,\r\n    PARAMETER_BREATH_RATE = 4,\r\n    PARAMETER_BREATH_RATE_SNR = 5,\r\n    PARAMETER_BREATH_RATE_CONFIDENCE = 6,\r\n    PARAMETER_FACE_AGE = 7,\r\n    PARAMETER_GENDER_MALE_WEIGHT = 8,\r\n    PARAMETER_GENDER_FEMALE_WEIGHT = 9,\r\n    PARAMETER_HEART_WAVE = 15\r\n}\r\n\r\nexport enum Events {\r\n    ON_DRAW_FRAME = \"onDrawFrame\",\r\n    ON_FACE_HEALTH_PROGRESS_CHANGED = \"onFaceHealthProgressChanged\"\r\n}\r\n\r\nexport enum TrackingState {\r\n    UNKNOWN_STATE = -1,\r\n    TRACKING = 0,\r\n    PAUSED = 1,\r\n    STOPPED = 2\r\n}\r\n\r\nexport enum ARHandType {\r\n    AR_HAND_UNKNOWN = -1,\r\n    AR_HAND_RIGHT = 0,\r\n    AR_HAND_LEFT = 1\r\n}\r\n\r\nexport enum SemanticPlaneLabel {\r\n    PLANE_OTHER = 0,\r\n    PLANE_WALL = 1,\r\n    PLANE_FLOOR = 2,\r\n    PLANE_SEAT = 3,\r\n    PLANE_TABLE = 4,\r\n    PLANE_CEILING = 5\r\n}\r\n\r\nexport enum PlaneType {\r\n    HORIZONTAL_UPWARD_FACING = 0,\r\n    HORIZONTAL_DOWNWARD_FACING = 1,\r\n    VERTICAL_FACING = 2,\r\n    UNKNOWN_FACING = 3\r\n}\r\n\r\nexport enum ARCoordinateSystemType {\r\n    COORDINATE_SYSTEM_TYPE_UNKNOWN = -1,\r\n    COORDINATE_SYSTEM_TYPE_3D_WORLD = 0,\r\n    COORDINATE_SYSTEM_TYPE_3D_SELF = 1,\r\n    COORDINATE_SYSTEM_TYPE_2D_IMAGE = 2,\r\n    COORDINATE_SYSTEM_TYPE_3D_CAMERA = 3\r\n}\r\n"]}