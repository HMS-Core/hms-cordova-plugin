/*
    Copyright 2020-2022. Huawei Technologies Co., Ltd. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HMSAROriginal = /** @class */ (function (_super) {
    __extends(HMSAROriginal, _super);
    function HMSAROriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HMSAROriginal.prototype.requestCameraPermission = function () { return cordova(this, "requestCameraPermission", { "otherPromise": true }, arguments); };
    HMSAROriginal.prototype.hasCameraPermission = function () { return cordova(this, "hasCameraPermission", { "otherPromise": true }, arguments); };
    HMSAROriginal.prototype.isAREngineServiceAPKReady = function () { return cordova(this, "isAREngineServiceAPKReady", { "otherPromise": true }, arguments); };
    HMSAROriginal.prototype.navigateToAppMarket = function () { return cordova(this, "navigateToAppMarket", { "otherPromise": true }, arguments); };
    HMSAROriginal.prototype.enableLogger = function () { return cordova(this, "enableLogger", { "otherPromise": true }, arguments); };
    HMSAROriginal.prototype.disableLogger = function () { return cordova(this, "disableLogger", { "otherPromise": true }, arguments); };
    HMSAROriginal.pluginName = "HMSAR";
    HMSAROriginal.plugin = "cordova-plugin-hms-ar";
    HMSAROriginal.pluginRef = "HMSAR";
    HMSAROriginal.repo = "";
    HMSAROriginal.install = "";
    HMSAROriginal.installVariables = [];
    HMSAROriginal.platforms = ["Android"];
    return HMSAROriginal;
}(IonicNativePlugin));
var HMSAR = new HMSAROriginal();
export { HMSAR };
var ARScene = /** @class */ (function () {
    function ARScene(scene, divId) {
        if (scene === "ARHand")
            this.arScene = new (HMSAROriginal.getPlugin()).ARHandScene(divId);
        else if (scene === "ARFace")
            this.arScene = new (HMSAROriginal.getPlugin()).ARFaceScene(divId);
        else if (scene === "ARBody")
            this.arScene = new (HMSAROriginal.getPlugin()).ARBodyScene(divId);
        else if (scene === "ARAugmentedImage")
            this.arScene = new (HMSAROriginal.getPlugin()).ARAugmentedImageScene(divId);
        else if (scene === "ARWorldBody")
            this.arScene = new (HMSAROriginal.getPlugin()).ARWorldBodyScene(divId);
        else if (scene === "ARSceneMesh")
            this.arScene = new (HMSAROriginal.getPlugin()).ARSceneMeshScene(divId);
        else if (scene === "ARCloud3DObject")
            this.arScene = new (HMSAROriginal.getPlugin()).ARCloud3DObjectScene(divId);
        else
            this.arScene = new (HMSAROriginal.getPlugin()).ARWorldScene(divId);
    }
    ARScene.prototype.on = function (eventName, call) {
        return this.arScene.on(eventName, call);
    };
    ARScene.prototype.startARScene = function (config, bounds) {
        return this.arScene.startARScene(config, bounds);
    };
    ARScene.prototype.destroy = function () {
        return this.arScene.destroy();
    };
    ARScene.prototype.setConfig = function (config) {
        return this.arScene.setConfig(config);
    };
    ARScene.prototype.scroll = function () {
        return this.arScene.scroll();
    };
    return ARScene;
}());
export { ARScene };
var ARHandScene = /** @class */ (function (_super) {
    __extends(ARHandScene, _super);
    function ARHandScene(divId) {
        return _super.call(this, "ARHand", divId) || this;
    }
    return ARHandScene;
}(ARScene));
export { ARHandScene };
var ARFaceScene = /** @class */ (function (_super) {
    __extends(ARFaceScene, _super);
    function ARFaceScene(divId) {
        return _super.call(this, "ARFace", divId) || this;
    }
    return ARFaceScene;
}(ARScene));
export { ARFaceScene };
var ARBodyScene = /** @class */ (function (_super) {
    __extends(ARBodyScene, _super);
    function ARBodyScene(divId) {
        return _super.call(this, "ARBody", divId) || this;
    }
    return ARBodyScene;
}(ARScene));
export { ARBodyScene };
var ARWorldScene = /** @class */ (function (_super) {
    __extends(ARWorldScene, _super);
    function ARWorldScene(divId) {
        return _super.call(this, "ARWorld", divId) || this;
    }
    return ARWorldScene;
}(ARScene));
export { ARWorldScene };
var ARAugmentedImageScene = /** @class */ (function (_super) {
    __extends(ARAugmentedImageScene, _super);
    function ARAugmentedImageScene(divId) {
        return _super.call(this, "ARAugmentedImage", divId) || this;
    }
    return ARAugmentedImageScene;
}(ARScene));
export { ARAugmentedImageScene };
var ARWorldBodyScene = /** @class */ (function (_super) {
    __extends(ARWorldBodyScene, _super);
    function ARWorldBodyScene(divId) {
        return _super.call(this, "ARWorldBody", divId) || this;
    }
    return ARWorldBodyScene;
}(ARScene));
export { ARWorldBodyScene };
var ARSceneMeshScene = /** @class */ (function (_super) {
    __extends(ARSceneMeshScene, _super);
    function ARSceneMeshScene(divId) {
        return _super.call(this, "ARSceneMesh", divId) || this;
    }
    return ARSceneMeshScene;
}(ARScene));
export { ARSceneMeshScene };
var ARCloud3DObjectScene = /** @class */ (function (_super) {
    __extends(ARCloud3DObjectScene, _super);
    function ARCloud3DObjectScene(divId) {
        return _super.call(this, "ARCloud3DObject", divId) || this;
    }
    return ARCloud3DObjectScene;
}(ARScene));
export { ARCloud3DObjectScene };
export var HealthParameter;
(function (HealthParameter) {
    HealthParameter[HealthParameter["UNKNOWN_TYPE"] = -1] = "UNKNOWN_TYPE";
    HealthParameter[HealthParameter["PARAMETER_INVALID"] = 0] = "PARAMETER_INVALID";
    HealthParameter[HealthParameter["PARAMETER_HEART_RATE"] = 1] = "PARAMETER_HEART_RATE";
    HealthParameter[HealthParameter["PARAMETER_HEART_RATE_SNR"] = 2] = "PARAMETER_HEART_RATE_SNR";
    HealthParameter[HealthParameter["PARAMETER_HEART_RATE_CONFIDENCE"] = 3] = "PARAMETER_HEART_RATE_CONFIDENCE";
    HealthParameter[HealthParameter["PARAMETER_BREATH_RATE"] = 4] = "PARAMETER_BREATH_RATE";
    HealthParameter[HealthParameter["PARAMETER_BREATH_RATE_SNR"] = 5] = "PARAMETER_BREATH_RATE_SNR";
    HealthParameter[HealthParameter["PARAMETER_BREATH_RATE_CONFIDENCE"] = 6] = "PARAMETER_BREATH_RATE_CONFIDENCE";
    HealthParameter[HealthParameter["PARAMETER_FACE_AGE"] = 7] = "PARAMETER_FACE_AGE";
    HealthParameter[HealthParameter["PARAMETER_GENDER_MALE_WEIGHT"] = 8] = "PARAMETER_GENDER_MALE_WEIGHT";
    HealthParameter[HealthParameter["PARAMETER_GENDER_FEMALE_WEIGHT"] = 9] = "PARAMETER_GENDER_FEMALE_WEIGHT";
    HealthParameter[HealthParameter["PARAMETER_HEART_WAVE"] = 15] = "PARAMETER_HEART_WAVE";
})(HealthParameter || (HealthParameter = {}));
export var Events;
(function (Events) {
    Events["ON_DRAW_FRAME"] = "onDrawFrame";
    Events["ON_FACE_HEALTH_PROGRESS_CHANGED"] = "onFaceHealthProgressChanged";
    Events["HANDLE_CAMERA_CONFIG_DATA"] = "handleCameraConfigData";
    Events["HANDLE_CAMERA_INTRINSICS_DATA"] = "handleCameraIntrinsicsData";
    Events["HANDLE_EVENT"] = "handleEvent";
    Events["HANDLE_RESULT"] = "handleResult";
    Events["HANDLE_PROCESS_PROGRESS_EVENT"] = "handleProcessProgressEvent";
    Events["HANDLE_MESSAGE_DATA"] = "handleMessageData";
})(Events || (Events = {}));
export var TrackingState;
(function (TrackingState) {
    TrackingState[TrackingState["UNKNOWN_STATE"] = -1] = "UNKNOWN_STATE";
    TrackingState[TrackingState["TRACKING"] = 0] = "TRACKING";
    TrackingState[TrackingState["PAUSED"] = 1] = "PAUSED";
    TrackingState[TrackingState["STOPPED"] = 2] = "STOPPED";
})(TrackingState || (TrackingState = {}));
export var ARHandType;
(function (ARHandType) {
    ARHandType[ARHandType["AR_HAND_UNKNOWN"] = -1] = "AR_HAND_UNKNOWN";
    ARHandType[ARHandType["AR_HAND_RIGHT"] = 0] = "AR_HAND_RIGHT";
    ARHandType[ARHandType["AR_HAND_LEFT"] = 1] = "AR_HAND_LEFT";
})(ARHandType || (ARHandType = {}));
export var SemanticPlaneLabel;
(function (SemanticPlaneLabel) {
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_OTHER"] = 0] = "PLANE_OTHER";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_WALL"] = 1] = "PLANE_WALL";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_FLOOR"] = 2] = "PLANE_FLOOR";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_SEAT"] = 3] = "PLANE_SEAT";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_TABLE"] = 4] = "PLANE_TABLE";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_CEILING"] = 5] = "PLANE_CEILING";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_DOOR"] = 6] = "PLANE_DOOR";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_WINDOW"] = 7] = "PLANE_WINDOW";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_BED"] = 8] = "PLANE_BED";
})(SemanticPlaneLabel || (SemanticPlaneLabel = {}));
export var PlaneType;
(function (PlaneType) {
    PlaneType[PlaneType["HORIZONTAL_UPWARD_FACING"] = 0] = "HORIZONTAL_UPWARD_FACING";
    PlaneType[PlaneType["HORIZONTAL_DOWNWARD_FACING"] = 1] = "HORIZONTAL_DOWNWARD_FACING";
    PlaneType[PlaneType["VERTICAL_FACING"] = 2] = "VERTICAL_FACING";
    PlaneType[PlaneType["UNKNOWN_FACING"] = 3] = "UNKNOWN_FACING";
})(PlaneType || (PlaneType = {}));
export var ARCoordinateSystemType;
(function (ARCoordinateSystemType) {
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_UNKNOWN"] = -1] = "COORDINATE_SYSTEM_TYPE_UNKNOWN";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_3D_WORLD"] = 0] = "COORDINATE_SYSTEM_TYPE_3D_WORLD";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_3D_SELF"] = 1] = "COORDINATE_SYSTEM_TYPE_3D_SELF";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_2D_IMAGE"] = 2] = "COORDINATE_SYSTEM_TYPE_2D_IMAGE";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_3D_CAMERA"] = 3] = "COORDINATE_SYSTEM_TYPE_3D_CAMERA";
})(ARCoordinateSystemType || (ARCoordinateSystemType = {}));
export var FaceHealthCheckState;
(function (FaceHealthCheckState) {
    FaceHealthCheckState[FaceHealthCheckState["DETECT_FAILED"] = -1] = "DETECT_FAILED";
    FaceHealthCheckState[FaceHealthCheckState["DETECT_SUCCESS"] = 0] = "DETECT_SUCCESS";
    FaceHealthCheckState[FaceHealthCheckState["NO_AVAILABLE_HEALTH_DATA"] = 1] = "NO_AVAILABLE_HEALTH_DATA";
    FaceHealthCheckState[FaceHealthCheckState["FACE_WITH_EXPRESSION"] = 10] = "FACE_WITH_EXPRESSION";
    FaceHealthCheckState[FaceHealthCheckState["IMAGE_SIZE_WRONG"] = 20] = "IMAGE_SIZE_WRONG";
    FaceHealthCheckState[FaceHealthCheckState["FACE_NOT_IN_ELLIPSE"] = 21] = "FACE_NOT_IN_ELLIPSE";
    FaceHealthCheckState[FaceHealthCheckState["FACE_MOTION_TOO_MUCH"] = 22] = "FACE_MOTION_TOO_MUCH";
    FaceHealthCheckState[FaceHealthCheckState["EFFECTIVE_PIXEEL_TOO_LOW"] = 23] = "EFFECTIVE_PIXEEL_TOO_LOW";
    FaceHealthCheckState[FaceHealthCheckState["LIGHT_TOO_DARK"] = 24] = "LIGHT_TOO_DARK";
    FaceHealthCheckState[FaceHealthCheckState["LIGHT_NOT_UNIFORM"] = 25] = "LIGHT_NOT_UNIFORM";
    FaceHealthCheckState[FaceHealthCheckState["POSE_TOO_LARGE"] = 26] = "POSE_TOO_LARGE";
    FaceHealthCheckState[FaceHealthCheckState["SIGNAL_CAPTURE_FAILED"] = 27] = "SIGNAL_CAPTURE_FAILED";
    FaceHealthCheckState[FaceHealthCheckState["SIGNAL_NAN"] = 28] = "SIGNAL_NAN";
    FaceHealthCheckState[FaceHealthCheckState["FINGER_OUTSIDE_CAMERA"] = 29] = "FINGER_OUTSIDE_CAMERA";
})(FaceHealthCheckState || (FaceHealthCheckState = {}));
export var LightMode;
(function (LightMode) {
    LightMode[LightMode["NONE"] = 0] = "NONE";
    LightMode[LightMode["AMBIENT_INTENSITY"] = 1] = "AMBIENT_INTENSITY";
    LightMode[LightMode["ENVIRONMENT_LIGHTING"] = 2] = "ENVIRONMENT_LIGHTING";
    LightMode[LightMode["ENVIRONMENT_TEXTURE"] = 4] = "ENVIRONMENT_TEXTURE";
    LightMode[LightMode["ALL"] = 65535] = "ALL";
})(LightMode || (LightMode = {}));
export var CameraLensFacing;
(function (CameraLensFacing) {
    CameraLensFacing[CameraLensFacing["REAR"] = 1] = "REAR";
    CameraLensFacing[CameraLensFacing["FRONT"] = 2] = "FRONT";
})(CameraLensFacing || (CameraLensFacing = {}));
export var SemanticMode;
(function (SemanticMode) {
    SemanticMode[SemanticMode["NONE"] = 0] = "NONE";
    SemanticMode[SemanticMode["PLANE"] = 1] = "PLANE";
    SemanticMode[SemanticMode["TARGET"] = 2] = "TARGET";
    SemanticMode[SemanticMode["ALL"] = 3] = "ALL";
})(SemanticMode || (SemanticMode = {}));
export var PowerMode;
(function (PowerMode) {
    PowerMode[PowerMode["NORMAL"] = 1] = "NORMAL";
    PowerMode[PowerMode["POWER_SAVING"] = 2] = "POWER_SAVING";
    PowerMode[PowerMode["ULTRA_POWER_SAVING"] = 3] = "ULTRA_POWER_SAVING";
    PowerMode[PowerMode["PERFORMANCE_FIRST"] = 4] = "PERFORMANCE_FIRST";
})(PowerMode || (PowerMode = {}));
export var FocusMode;
(function (FocusMode) {
    FocusMode[FocusMode["FIXED_FOCUS"] = 1] = "FIXED_FOCUS";
    FocusMode[FocusMode["AUTO_FOCUS"] = 2] = "AUTO_FOCUS";
})(FocusMode || (FocusMode = {}));
export var UpdateMode;
(function (UpdateMode) {
    UpdateMode[UpdateMode["BLOCKING"] = 1] = "BLOCKING";
    UpdateMode[UpdateMode["LATEST_CAMERA_IMAGE"] = 2] = "LATEST_CAMERA_IMAGE";
})(UpdateMode || (UpdateMode = {}));
export var TargetLabel;
(function (TargetLabel) {
    TargetLabel[TargetLabel["TARGET_INVALID"] = -1] = "TARGET_INVALID";
    TargetLabel[TargetLabel["TARGET_OTHER"] = 0] = "TARGET_OTHER";
    TargetLabel[TargetLabel["TARGET_SEAT"] = 1] = "TARGET_SEAT";
    TargetLabel[TargetLabel["TARGET_TABLE"] = 2] = "TARGET_TABLE";
})(TargetLabel || (TargetLabel = {}));
export var TargetShapeType;
(function (TargetShapeType) {
    TargetShapeType[TargetShapeType["TARGET_SHAPE_INVALID"] = -1] = "TARGET_SHAPE_INVALID";
    TargetShapeType[TargetShapeType["TARGET_SHAPE_OTHER"] = 0] = "TARGET_SHAPE_OTHER";
    TargetShapeType[TargetShapeType["TARGET_SHAPE_CUBE"] = 1] = "TARGET_SHAPE_CUBE";
    TargetShapeType[TargetShapeType["TARGET_SHAPE_CIRCLE"] = 2] = "TARGET_SHAPE_CIRCLE";
    TargetShapeType[TargetShapeType["TARGET_SHAPE_RECT"] = 3] = "TARGET_SHAPE_RECT";
})(TargetShapeType || (TargetShapeType = {}));
export var PlaneFindingMode;
(function (PlaneFindingMode) {
    PlaneFindingMode[PlaneFindingMode["DISABLED"] = 0] = "DISABLED";
    PlaneFindingMode[PlaneFindingMode["HORIZONTAL_ONLY"] = 1] = "HORIZONTAL_ONLY";
    PlaneFindingMode[PlaneFindingMode["VERTICAL_ONLY"] = 2] = "VERTICAL_ONLY";
    PlaneFindingMode[PlaneFindingMode["ENABLE"] = 3] = "ENABLE";
})(PlaneFindingMode || (PlaneFindingMode = {}));
//# sourceMappingURL=data:application/json;base64,