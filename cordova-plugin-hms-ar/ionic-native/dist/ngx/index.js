/*
    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HMSAR = /** @class */ (function (_super) {
    __extends(HMSAR, _super);
    function HMSAR() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HMSAR.prototype.requestCameraPermission = function () { return cordova(this, "requestCameraPermission", { "otherPromise": true }, arguments); };
    HMSAR.prototype.hasCameraPermission = function () { return cordova(this, "hasCameraPermission", { "otherPromise": true }, arguments); };
    HMSAR.prototype.isAREngineServiceAPKReady = function () { return cordova(this, "isAREngineServiceAPKReady", { "otherPromise": true }, arguments); };
    HMSAR.prototype.navigateToAppMarket = function () { return cordova(this, "navigateToAppMarket", { "otherPromise": true }, arguments); };
    HMSAR.prototype.enableLogger = function () { return cordova(this, "enableLogger", { "otherPromise": true }, arguments); };
    HMSAR.prototype.disableLogger = function () { return cordova(this, "disableLogger", { "otherPromise": true }, arguments); };
    HMSAR.pluginName = "HMSAR";
    HMSAR.plugin = "cordova-plugin-hms-ar";
    HMSAR.pluginRef = "HMSAR";
    HMSAR.repo = "";
    HMSAR.install = "";
    HMSAR.installVariables = [];
    HMSAR.platforms = ["Android"];
    HMSAR = __decorate([
        Injectable()
    ], HMSAR);
    return HMSAR;
}(IonicNativePlugin));
export { HMSAR };
var ARScene = /** @class */ (function () {
    function ARScene(scene, divId) {
        if (scene === "ARHand")
            this.arScene = new (HMSAR.getPlugin()).ARHandScene(divId);
        else if (scene === "ARFace")
            this.arScene = new (HMSAR.getPlugin()).ARFaceScene(divId);
        else if (scene === "ARBody")
            this.arScene = new (HMSAR.getPlugin()).ARBodyScene(divId);
        else
            this.arScene = new (HMSAR.getPlugin()).ARWorldScene(divId);
    }
    ARScene.prototype.on = function (eventName, call) {
        return this.arScene.on(eventName, call);
    };
    ARScene.prototype.startARScene = function (config, bounds) {
        return this.arScene.startARScene(config, bounds);
    };
    ARScene.prototype.destroy = function () {
        return this.arScene.destroy();
    };
    ARScene.prototype.setConfig = function (config) {
        return this.arScene.setConfig(config);
    };
    ARScene.prototype.scroll = function () {
        return this.arScene.scroll();
    };
    return ARScene;
}());
export { ARScene };
var ARHandScene = /** @class */ (function (_super) {
    __extends(ARHandScene, _super);
    function ARHandScene(divId) {
        return _super.call(this, "ARHand", divId) || this;
    }
    return ARHandScene;
}(ARScene));
export { ARHandScene };
var ARFaceScene = /** @class */ (function (_super) {
    __extends(ARFaceScene, _super);
    function ARFaceScene(divId) {
        return _super.call(this, "ARFace", divId) || this;
    }
    return ARFaceScene;
}(ARScene));
export { ARFaceScene };
var ARBodyScene = /** @class */ (function (_super) {
    __extends(ARBodyScene, _super);
    function ARBodyScene(divId) {
        return _super.call(this, "ARBody", divId) || this;
    }
    return ARBodyScene;
}(ARScene));
export { ARBodyScene };
var ARWorldScene = /** @class */ (function (_super) {
    __extends(ARWorldScene, _super);
    function ARWorldScene(divId) {
        return _super.call(this, "ARWorld", divId) || this;
    }
    return ARWorldScene;
}(ARScene));
export { ARWorldScene };
export var HealthParameter;
(function (HealthParameter) {
    HealthParameter[HealthParameter["UNKNOWN_TYPE"] = -1] = "UNKNOWN_TYPE";
    HealthParameter[HealthParameter["PARAMETER_INVALID"] = 0] = "PARAMETER_INVALID";
    HealthParameter[HealthParameter["PARAMETER_HEART_RATE"] = 1] = "PARAMETER_HEART_RATE";
    HealthParameter[HealthParameter["PARAMETER_HEART_RATE_SNR"] = 2] = "PARAMETER_HEART_RATE_SNR";
    HealthParameter[HealthParameter["PARAMETER_HEART_RATE_CONFIDENCE"] = 3] = "PARAMETER_HEART_RATE_CONFIDENCE";
    HealthParameter[HealthParameter["PARAMETER_BREATH_RATE"] = 4] = "PARAMETER_BREATH_RATE";
    HealthParameter[HealthParameter["PARAMETER_BREATH_RATE_SNR"] = 5] = "PARAMETER_BREATH_RATE_SNR";
    HealthParameter[HealthParameter["PARAMETER_BREATH_RATE_CONFIDENCE"] = 6] = "PARAMETER_BREATH_RATE_CONFIDENCE";
    HealthParameter[HealthParameter["PARAMETER_FACE_AGE"] = 7] = "PARAMETER_FACE_AGE";
    HealthParameter[HealthParameter["PARAMETER_GENDER_MALE_WEIGHT"] = 8] = "PARAMETER_GENDER_MALE_WEIGHT";
    HealthParameter[HealthParameter["PARAMETER_GENDER_FEMALE_WEIGHT"] = 9] = "PARAMETER_GENDER_FEMALE_WEIGHT";
    HealthParameter[HealthParameter["PARAMETER_HEART_WAVE"] = 15] = "PARAMETER_HEART_WAVE";
})(HealthParameter || (HealthParameter = {}));
export var Events;
(function (Events) {
    Events["ON_DRAW_FRAME"] = "onDrawFrame";
    Events["ON_FACE_HEALTH_PROGRESS_CHANGED"] = "onFaceHealthProgressChanged";
})(Events || (Events = {}));
export var TrackingState;
(function (TrackingState) {
    TrackingState[TrackingState["UNKNOWN_STATE"] = -1] = "UNKNOWN_STATE";
    TrackingState[TrackingState["TRACKING"] = 0] = "TRACKING";
    TrackingState[TrackingState["PAUSED"] = 1] = "PAUSED";
    TrackingState[TrackingState["STOPPED"] = 2] = "STOPPED";
})(TrackingState || (TrackingState = {}));
export var ARHandType;
(function (ARHandType) {
    ARHandType[ARHandType["AR_HAND_UNKNOWN"] = -1] = "AR_HAND_UNKNOWN";
    ARHandType[ARHandType["AR_HAND_RIGHT"] = 0] = "AR_HAND_RIGHT";
    ARHandType[ARHandType["AR_HAND_LEFT"] = 1] = "AR_HAND_LEFT";
})(ARHandType || (ARHandType = {}));
export var SemanticPlaneLabel;
(function (SemanticPlaneLabel) {
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_OTHER"] = 0] = "PLANE_OTHER";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_WALL"] = 1] = "PLANE_WALL";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_FLOOR"] = 2] = "PLANE_FLOOR";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_SEAT"] = 3] = "PLANE_SEAT";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_TABLE"] = 4] = "PLANE_TABLE";
    SemanticPlaneLabel[SemanticPlaneLabel["PLANE_CEILING"] = 5] = "PLANE_CEILING";
})(SemanticPlaneLabel || (SemanticPlaneLabel = {}));
export var PlaneType;
(function (PlaneType) {
    PlaneType[PlaneType["HORIZONTAL_UPWARD_FACING"] = 0] = "HORIZONTAL_UPWARD_FACING";
    PlaneType[PlaneType["HORIZONTAL_DOWNWARD_FACING"] = 1] = "HORIZONTAL_DOWNWARD_FACING";
    PlaneType[PlaneType["VERTICAL_FACING"] = 2] = "VERTICAL_FACING";
    PlaneType[PlaneType["UNKNOWN_FACING"] = 3] = "UNKNOWN_FACING";
})(PlaneType || (PlaneType = {}));
export var ARCoordinateSystemType;
(function (ARCoordinateSystemType) {
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_UNKNOWN"] = -1] = "COORDINATE_SYSTEM_TYPE_UNKNOWN";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_3D_WORLD"] = 0] = "COORDINATE_SYSTEM_TYPE_3D_WORLD";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_3D_SELF"] = 1] = "COORDINATE_SYSTEM_TYPE_3D_SELF";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_2D_IMAGE"] = 2] = "COORDINATE_SYSTEM_TYPE_2D_IMAGE";
    ARCoordinateSystemType[ARCoordinateSystemType["COORDINATE_SYSTEM_TYPE_3D_CAMERA"] = 3] = "COORDINATE_SYSTEM_TYPE_3D_CAMERA";
})(ARCoordinateSystemType || (ARCoordinateSystemType = {}));
//# sourceMappingURL=data:application/json;base64,