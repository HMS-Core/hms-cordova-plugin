{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/www/interfaces.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2020-2021. Huawei Technologies Co., Ltd. All rights reserved.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\")\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n        https://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\nimport {Cap, Polyline} from './polyline';\r\nimport {Circle} from \"./circle\";\r\nimport {Marker} from \"./marker\";\r\nimport {GroundOverlay} from \"./groundOverlay\";\r\nimport {TileOverlay} from \"./tileOverlay\";\r\nimport {Polygon} from \"./polygon\";\r\nimport {MapStyleOptions} from \"./HMSMap\";\r\n\r\n\r\nexport interface HuaweiMapOptions {\r\n    mapType?: MapType,\r\n    zoomControlsEnabled?: boolean,\r\n    compassEnabled?: boolean,\r\n    zoomGesturesEnabled?: boolean,\r\n    scrollGesturesEnabled?: boolean,\r\n    rotateGesturesEnabled?: boolean,\r\n    tiltGesturesEnabled?: boolean,\r\n    zOrderOnTop?: boolean,\r\n    liteMode?: boolean,\r\n    ambientEnabled?: boolean,\r\n    minZoomPreference?: number,\r\n    maxZoomPreference?: number,\r\n    cameraPosition?: CameraPosition,\r\n    latLngBounds?: LatLngBounds\r\n}\r\n\r\nexport interface LatLngBounds {\r\n    southwest: LatLng,\r\n    northeast: LatLng\r\n}\r\n\r\nexport interface CameraPosition {\r\n    target: LatLng,\r\n    zoom?: number,\r\n    bearing?: number,\r\n    tilt?: number\r\n}\r\n\r\nexport interface LatLng {\r\n    lat: number,\r\n    lng: number\r\n}\r\n\r\nexport interface CircleOptions {\r\n    center: LatLng,\r\n    clickable?: boolean,\r\n    fillColor?: Color,\r\n    radius: number,\r\n    strokeColor?: Color,\r\n    strokeWidth?: number,\r\n    strokePattern?: PatternItem[],\r\n    visible?: boolean,\r\n    zIndex?: number\r\n}\r\n\r\nexport interface POI {\r\n    latLng: LatLng,\r\n    name?: string,\r\n    placeId?: string\r\n}\r\n\r\nexport interface PatternItem {\r\n    type: PatternItemType,\r\n    length: number\r\n}\r\n\r\nexport interface MarkerOptions {\r\n    anchorMarker?: Anchor,\r\n    infoWindowAnchor?: Anchor,\r\n    infoWindowShown?: boolean,\r\n    alpha?: number,\r\n    clusterable?: boolean,\r\n    draggable?: boolean,\r\n    icon?: BitmapDescriptor,\r\n    flat?: boolean,\r\n    position: LatLng,\r\n    rotation?: number,\r\n    snippet?: string,\r\n    title?: string,\r\n    visible?: boolean,\r\n    zIndex?: number\r\n}\r\n\r\nexport interface ScaledSize {\r\n    width: number,\r\n    height: number\r\n}\r\n\r\nexport interface Asset {\r\n    fileName: string,\r\n    scaledSize?: ScaledSize\r\n}\r\n\r\nexport interface Resource {\r\n    fileName: string,\r\n    resourceType: string,\r\n    scaledSize?: ScaledSize\r\n}\r\n\r\nexport interface BitmapDescriptor {\r\n    hue?: Hue,\r\n    asset?: Asset,\r\n    resource?: Resource,\r\n}\r\n\r\nexport interface Anchor {\r\n    u?: number,\r\n    v?: number\r\n}\r\n\r\nexport interface PolygonOptions {\r\n    points: LatLng[],\r\n    holes?: LatLng[][];\r\n    clickable?: boolean,\r\n    geodesic?: boolean,\r\n    fillColor?: Color,\r\n    strokeColor?: Color,\r\n    strokeJointType?: JointType,\r\n    strokePattern?: PatternItem[],\r\n    strokeWidth?: number,\r\n    visible?: true,\r\n    zIndex?: number;\r\n}\r\n\r\nexport interface PolylineOptions {\r\n    points: LatLng[],\r\n    clickable?: boolean,\r\n    color?: Color,\r\n    startCap?: Cap,\r\n    pattern?: PatternItem[],\r\n    endCap?: Cap,\r\n    geodesic?: boolean,\r\n    jointType?: JointType,\r\n    visible?: boolean,\r\n    width?: number,\r\n    zIndex?: number\r\n}\r\n\r\nexport interface GroundOverlayOptions {\r\n    anchor?: Anchor,\r\n    bearing?: number,\r\n    clickable?: boolean,\r\n    image?: BitmapDescriptor,\r\n    visible?: boolean,\r\n    transparency?: number,\r\n    zIndex?: number,\r\n    position: Position,\r\n    bounds?: LatLngBounds\r\n}\r\n\r\nexport interface Position {\r\n    latLng: LatLng,\r\n    width: number,\r\n    height?: number\r\n}\r\n\r\nexport interface URLTile {\r\n    URL: string;\r\n}\r\n\r\nexport interface Tile {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    zoom: number;\r\n    path: string;\r\n}\r\n\r\nexport interface RepetitiveTile {\r\n    width: number;\r\n    height: number;\r\n    zoom: number[];\r\n    path: string;\r\n}\r\n\r\nexport interface TileProvider {\r\n    type: TileType,\r\n    data: Tile[] | URLTile | RepetitiveTile\r\n}\r\n\r\nexport interface TileOverlayOptions {\r\n    tileProvider: TileProvider,\r\n    fadeIn?: boolean,\r\n    transparency?: number,\r\n    visible?: boolean,\r\n    zIndex?: number\r\n}\r\n\r\nexport class AnimationSet {\r\n\r\n    readonly animations: Map<string, Animation> = new Map<string, Animation>();\r\n\r\n    addRotateAnimation(animation: RotateAnimation): void {\r\n        this.animations.set(\"Rotate\", animation);\r\n    }\r\n\r\n    addScaleAnimation(animation: ScaleAnimation): void {\r\n        this.animations.set(\"Scale\", animation);\r\n    }\r\n\r\n    addTranslateAnimation(animation: TranslateAnimation): void {\r\n        this.animations.set(\"Translate\", animation);\r\n    }\r\n\r\n    addAlphaAnimation(animation: AlphaAnimation): void {\r\n        this.animations.set(\"Alpha\", animation);\r\n    }\r\n}\r\n\r\nexport interface Animation {\r\n    fillMode?: number,\r\n    duration?: number,\r\n    repeatCount?: number,\r\n    repeatMode?: number,\r\n    interpolator?: Interpolator,\r\n    animationStart?: () => void,\r\n    animationEnd?: () => void\r\n}\r\n\r\ninterface _control {\r\n    isAnimationStart: boolean,\r\n    isAnimationEnd: boolean\r\n}\r\n\r\nexport interface _rotateAnimation extends RotateAnimation, _control {\r\n}\r\n\r\nexport interface _translateAnimation extends TranslateAnimation, _control {\r\n}\r\n\r\nexport interface _scaleAnimation extends ScaleAnimation, _control {\r\n}\r\n\r\nexport interface _alphaAnimation extends AlphaAnimation, _control {\r\n}\r\n\r\nexport interface RotateAnimation extends Animation {\r\n    fromDegree: number;\r\n    toDegree: number;\r\n}\r\n\r\nexport interface ScaleAnimation extends Animation {\r\n    fromX: number;\r\n    toX: number;\r\n    fromY: number;\r\n    toY: number;\r\n}\r\n\r\nexport interface TranslateAnimation extends Animation {\r\n    target: LatLng;\r\n}\r\n\r\nexport interface AlphaAnimation extends Animation {\r\n    fromAlpha: number;\r\n    toAlpha: number;\r\n}\r\n\r\nexport interface CancelableCallback {\r\n    onFinish: () => void,\r\n    onCancel: () => void\r\n}\r\n\r\nexport interface InfoWindowAdapter {\r\n    file: string,\r\n    width: number,\r\n    height: number\r\n}\r\n\r\nexport interface Location {\r\n    accuracy: number,\r\n    altitude: number,\r\n    bearing: number,\r\n    elapsedRealtimeNanos: number,\r\n    latitude: number,\r\n    longitude: number,\r\n    provider: string,\r\n    speed: number,\r\n    time: number,\r\n    fromMockProvider: boolean,\r\n    contents: number,\r\n    bearingAccuracyDegrees?: number,\r\n    speedAccuracyMetersPerSecond?: number,\r\n    verticalAccuracyMeters?: number\r\n}\r\n\r\nexport interface LocationSource {\r\n\r\n}\r\n\r\nexport interface ComputeDistanceResult {\r\n    result: number\r\n}\r\n\r\nexport interface Point {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport interface SnapshotResult {\r\n    data: string,\r\n}\r\n\r\nexport interface VisibleRegion {\r\n    farLeft: LatLng,\r\n    farRight: LatLng,\r\n    latLngBounds: LatLngBounds,\r\n    nearLeft: LatLng,\r\n    nearRight: LatLng\r\n}\r\n\r\nexport interface Interpolator {\r\n    type: InterpolatorType,\r\n    args?: any\r\n}\r\n\r\nexport interface HuaweiMap {\r\n    on(event: MapEvent, callback: (val: any) => void): void;\r\n    destroyMap(): Promise<void>;\r\n    hideMap(): Promise<void>;\r\n    getComponent(key: string): any;\r\n    removeComponent(key: string): void;\r\n    getId(): number;\r\n    scroll(): void;\r\n    syncDimensions(): void;\r\n    addCircle(circleOptions: CircleOptions): Promise<Circle>;\r\n    addMarker(markerOptions: MarkerOptions): Promise<Marker>;\r\n    addGroundOverlay(groundOverlayOptions: GroundOverlayOptions): Promise<GroundOverlay>;\r\n    addTileOverlay(tileOverlayOptions: TileOverlayOptions): Promise<TileOverlay>;\r\n    addPolygon(polygonOptions: PolygonOptions): Promise<Polygon>;\r\n    addPolyline(polylineOptions: PolylineOptions): Promise<Polyline>;\r\n    animateCamera(cameraUpdate: CameraUpdate): Promise<void>;\r\n    animateCamera(cameraUpdate: CameraUpdate, cancelableCallback?: CancelableCallback): Promise<void>;\r\n    animateCamera(cameraUpdate: CameraUpdate, durationMs?: number, cancelableCallback?: CancelableCallback): Promise<void>;\r\n    moveCamera(cameraUpdate: CameraUpdate): Promise<void>;\r\n    clear(): Promise<void>;\r\n    resetMinMaxZoomPreference(): Promise<void>;\r\n    stopAnimation(): Promise<void>;\r\n    getCameraPosition(): Promise<CameraPosition>;\r\n    getMapType(): Promise<MapType>;\r\n    getMaxZoomLevel(): Promise<number>;\r\n    getMinZoomLevel(): Promise<number>;\r\n    getProjection(): Projection;\r\n    getUiSettings(): UiSettings;\r\n    isBuildingsEnabled(): Promise<boolean>;\r\n    isMyLocationEnabled(): Promise<boolean>;\r\n    isTrafficEnabled(): Promise<boolean>;\r\n    isIndoorEnabled(): Promise<boolean>;\r\n    setBuildingsEnabled(buildingsEnabled: boolean): Promise<void>;\r\n    setContentDescription(contentDescription: string): Promise<void>;\r\n    setInfoWindowAdapter(infoWindowAdapter: InfoWindowAdapter): Promise<void>;\r\n    setLatLngBoundsForCameraTarget(latLngBoundsForCameraTarget: LatLngBounds): Promise<void>;\r\n    setLocationSource(locationSource: LocationSource): Promise<void>;\r\n    setMapStyle(mapStyle: MapStyleOptions): Promise<void>;\r\n    setMapType(mapType: MapType): Promise<void>;\r\n    setMarkersClustering(markersClustering: boolean): Promise<void>;\r\n    setMaxZoomPreference(maxZoomPreference: number): Promise<void>;\r\n    setMinZoomPreference(minZoomPreference: number): Promise<void>;\r\n    setMyLocationEnabled(myLocationEnabled: boolean): Promise<void>;\r\n    setPadding(left: number, top: number, right: number, bottom: number): Promise<void>;\r\n    setTrafficEnabled(trafficEnabled: boolean): Promise<void>;\r\n    snapshot(onReadyCallback: (snapshot: SnapshotResult) => void): Promise<void>;\r\n    startOverlayInterval(): void;\r\n    startObserver(): void;\r\n    setMapPointersEnabled(mapPointersEnabled: boolean): Promise<void>;\r\n    isMapPointersEnabled(): Promise<boolean>;\r\n    setPointToCenter(x: number, y: number): Promise<void>;\r\n}\r\n\r\nexport interface CameraUpdate {\r\n    moveCamera(mapId: string): Promise<any>;\r\n    animateCamera(mapId: string, props: any): Promise<any>;\r\n}\r\n\r\nexport interface Projection {\r\n    fromScreenLocation(point: Point): Promise<LatLng>;\r\n    getVisibleRegion(): Promise<VisibleRegion>;\r\n    toScreenLocation(latLng: LatLng): Promise<Point>;\r\n}\r\n\r\nexport interface UiSettings {\r\n    isCompassEnabled(): Promise<boolean>;\r\n    isIndoorLevelPickerEnabled(): Promise<boolean>;\r\n    isMapToolbarEnabled(): Promise<boolean>;\r\n    isMyLocationButtonEnabled(): Promise<boolean>;\r\n    isRotateGesturesEnabled(): Promise<boolean>;\r\n    isScrollGesturesEnabled(): Promise<boolean>;\r\n    isScrollGesturesEnabledDuringRotateOrZoom(): Promise<boolean>;\r\n    isTiltGesturesEnabled(): Promise<boolean>;\r\n    isZoomControlsEnabled(): Promise<boolean>;\r\n    isZoomGesturesEnabled(): Promise<boolean>;\r\n    setAllGesturesEnabled(allGesturesEnabled: boolean): Promise<void>;\r\n    setCompassEnabled(compassEnabled: boolean): Promise<void>;\r\n    setIndoorLevelPickerEnabled(indoorLevelPickerEnabled: boolean): Promise<void>;\r\n    setMapToolbarEnabled(mapToolbarEnabled: boolean): Promise<void>;\r\n    setMyLocationButtonEnabled(myLocationButtonEnabled: boolean): Promise<void>;\r\n    setRotateGesturesEnabled(rotateGesturesEnabled: boolean): Promise<void>;\r\n    setScrollGesturesEnabled(scrollGesturesEnabled: boolean): Promise<void>;\r\n    setScrollGesturesEnabledDuringRotateOrZoom(scrollGesturesEnabledDuringRotateOrZoom: boolean): Promise<void>;\r\n    setTiltGesturesEnabled(tiltGesturesEnabled: boolean): Promise<void>;\r\n    setZoomControlsEnabled(zoomControlsEnabled: boolean): Promise<void>;\r\n    setZoomGesturesEnabled(zoomGesturesEnabled: boolean): Promise<void>;\r\n    setGestureScaleByMapCenter(gestureScaleByMapCenterEnabled: boolean): Promise<void>;\r\n    setMarkerClusterColor(markerClusterColor: number): Promise<void>;\r\n    setMarkerClusterIcon(markerClusterIcon: BitmapDescriptor): Promise<void>;\r\n    setMarkerClusterTextColor(markerClusterTextColor: number): Promise<void>;\r\n}\r\n\r\n/*-------------------------------------------------------------ENUMS----------------------------------------------------------*/\r\n\r\nexport enum Color {\r\n    RED = -65536,\r\n    DARK_GRAY = -12303292,\r\n    GRAY = -7829368,\r\n    WHITE = -1,\r\n    BLUE = -16776961,\r\n    BLACK = -16777216,\r\n    LITE_GRAY = -3355444,\r\n    MAGENTA = -65281,\r\n    YELLOW = -256,\r\n    CYAN = -16711681,\r\n    GREEN = -16711936,\r\n    TRANSPARENT = 0\r\n}\r\n\r\nexport enum JointType {\r\n    ROUND = 2,\r\n    BEVEL = 1,\r\n    DEFAULT = 0\r\n}\r\n\r\nexport enum MapEvent {\r\n    ON_INDOOR_BUILDINGS_FOCUSED = \"onIndoorBuildingsFocused\",\r\n    ON_INDOOR_LEVEL_ACTIVATED = \"onIndoorLevelActivated\",\r\n    ON_MAP_LOADED = \"onMapLoaded\",\r\n    ON_CAMERA_IDLE = \"onCameraIdle\",\r\n    ON_CAMERA_MOVE_CANCELED = \"onCameraMoveCanceled\",\r\n    ON_CAMERA_MOVE = \"onCameraMove\",\r\n    ON_CAMERA_MOVE_STARTED = \"onCameraMoveStarted\",\r\n    ON_CIRCLE_CLICK = \"onCircleClick\",\r\n    ON_GROUND_OVERLAY_CLICK = \"onGroundOverlayClick\",\r\n    ON_INFO_WINDOW_CLICK = \"onInfoWindowClick\",\r\n    ON_INFO_WINDOW_CLOSE = \"onInfoWindowClose\",\r\n    ON_INFO_WINDOW_LONG_CLICK = \"onInfoWindowLongClick\",\r\n    ON_MAP_CLICK = \"onMapClick\",\r\n    ON_MAP_LONG_CLICK = \"onMapLongClick\",\r\n    ON_MARKER_CLICK = \"onMarkerClick\",\r\n    ON_MARKER_DRAG_START = \"onMarkerDragStart\",\r\n    ON_MARKER_DRAG = \"onMarkerDrag\",\r\n    ON_MARKER_DRAG_END = \"onMarkerDragEnd\",\r\n    ON_MY_LOCATION_BUTTON_CLICK = \"onMyLocationButtonClick\",\r\n    ON_MY_LOCATION_CLICK = \"onMyLocationClick\",\r\n    ON_POI_CLICK = \"onPoiClick\",\r\n    ON_POLYGON_CLICK = \"onPolygonClick\",\r\n    ON_POLYLINE_CLICK = \"onPolylineClick\",\r\n    ON_CANCELABLE_CALLBACK_FINISH = \"onCancelableCallbackFinish\",\r\n    ON_CANCELABLE_CALLBACK_CANCEL = \"onCancelableCallbackCancel\",\r\n    ON_SNAPSHOT_READY_CALLBACK = \"onSnapshotReadyCallback\"\r\n\r\n}\r\n\r\nexport enum InterpolatorType {\r\n    LINEAR,\r\n    ACCELERATE_DECELERATE,\r\n    ACCELERATE,\r\n    ANTICIPATE,\r\n    ANTICIPATE_OVERSHOOT,\r\n    BOUNCE,\r\n    CYCLE,\r\n    DECELERATE,\r\n    OVERSHOOT,\r\n    PATH\r\n}\r\n\r\nexport interface ErrorCode {\r\n    code: number,\r\n    message: string,\r\n}\r\n\r\nexport class ErrorCodes {\r\n    public static readonly NO_DOM_ELEMENT_FOUND: ErrorCode = {\r\n        code: 5000,\r\n        message: \"No DOM element found with given divId.\"\r\n    };\r\n    public static readonly POINTS_PROPERTY_MUST_DEFINED: ErrorCode = {\r\n        code: 5100,\r\n        message: \"Points property must be defined.\"\r\n    };\r\n    public static readonly CENTER_PROPERTY_MUST_DEFINED: ErrorCode = {\r\n        code: 5101,\r\n        message: \"Center property must be defined.\"\r\n    };\r\n    public static readonly POSITION_PROPERTY_MUST_DEFINED: ErrorCode = {\r\n        code: 5102,\r\n        message: \"Position property must be defined.\"\r\n    };\r\n    public static readonly NO_COMPONENT_EXISTS_GIVEN_ID: ErrorCode = {\r\n        code: 5102,\r\n        message: \"No component is found with given id\"\r\n    };\r\n\r\n    public static toString(error: ErrorCode): string {\r\n        return `Error Code: ${error.code} - Message: ${error.message}`;\r\n    }\r\n}\r\n\r\nexport enum MapType {\r\n    MAP_TYPE_NONE = 0,\r\n    MAP_TYPE_SATELLITE = 2,\r\n    MAP_TYPE_NORMAL = 1,\r\n    MAP_TYPE_HYBRID = 4,\r\n    MAP_TYPE_TERRAIN = 3,\r\n}\r\n\r\nexport enum Hue {\r\n    HUE_GREEN = 120,\r\n    HUE_AZURE = 210,\r\n    HUE_ROSE = 330,\r\n    HUE_CYAN = 180,\r\n    HUE_ORANGE = 30,\r\n    HUE_MAGENTA = 300,\r\n    HUE_VIOLET = 270,\r\n    HUE_YELLOW = 60,\r\n    HUE_BLUE = 240,\r\n    HUE_RED = 0,\r\n}\r\n\r\nexport enum PatternItemType {\r\n    TYPE_GAP = 2,\r\n    TYPE_DOT = 1,\r\n    TYPE_DASH = 0\r\n}\r\n\r\nexport enum CameraMoveStartedReason {\r\n    REASON_API_ANIMATION = 2,\r\n    REASON_DEVELOPER_ANIMATION = 3,\r\n    REASON_GESTURE = 1\r\n}\r\n\r\nexport enum TileType {\r\n    URL_TILE,\r\n    REPETITIVE_TILE,\r\n    LOCAL_TILE\r\n}\r\n\r\nexport enum AnimationConstant {\r\n    FILL_MODE_FORWARDS = 0,\r\n    FILL_MODE_BACKWARDS = 1,\r\n    INFINITE = -1,\r\n    RESTART = 1,\r\n    REVERSE = 2\r\n}\r\n"]}